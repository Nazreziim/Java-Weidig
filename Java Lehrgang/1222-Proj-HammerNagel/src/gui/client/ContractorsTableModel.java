package gui.client;

import java.util.ArrayList;
import java.util.List;

import javax.swing.table.AbstractTableModel;

import client.Client;
import db.Data;

/**
 * This class is used by the JTable instance of the GUI as model to provide the appropriate contents.
 * Instances of this class should be generated by the controlling element of the
 * GUI (e.g. {@link ClientGUIController}). Data can be added to the model by using the 
 * {@link ContractorsTableModel#addContractor(String[])} method. <br>
 * There is no direct link to the {@link Data} class because this would make the use of a
 * network client impossible. The communication to the {@link Data} class should be initiated
 * by the {@link ClientGUIController} and its connected {@link Client}.
 * 
 * @author Lars Gerhard
 * @see AbstractTableModel
 */
class ContractorsTableModel extends AbstractTableModel {
	
	private static final long serialVersionUID = 926566272024543258L;
	private String[] headers = {"Name","Location","Specialities","Size","Rate","Owner"};
	private List<String[]> contrRecords = new ArrayList<String[]>();

	/**
	 * Returns the number of rows in the model. A JTable uses this method to
	 * determine how many rows it should display. This method should be quick,
	 * as it is called frequently during rendering.
	 * In this class this is done by returning the size of the list where the
	 * contractor records are stored.
	 * 
	 * @return the number of rows in the model
	 */
	@Override
	public int getRowCount() {
		return this.contrRecords.size();
	}

	/**
	 * Returns the number of columns in the model.
	 * A JTable uses this method to determine how many columns it 
	 * should create and display by default. 
	 * In this class this is done by returning the size of the array where
	 * the headers of the table are stored.
	 * 
	 * @return the number of columns in the model
	 */
	@Override
	public int getColumnCount() {
		return this.headers.length;
	}

	/**
	 * Returns the value for the cell at columnIndex and rowIndex.
	 * 
	 * @param rowIndex the row whose value is to be queried
	 * @param columnIndex the column whose value is to be queried
	 * @return the value Object at the specified cell
	 */
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		return this.contrRecords.get(rowIndex)[columnIndex];
	}

	/**
	 * Returns the name of a column.
	 * Column headers in this model are the field names as defined in the
	 * database file.
	 * 
	 * @param column the column being queried
	 * @return a String with the default name of the column, null if the column
	 * cannot be found
	 */
	@Override
	public String getColumnName(int column) {
		return headers[column];
	}

	/**
	 * Adds a new contractor to the table model
	 * 
	 * @param contractor passed as a String array
	 */
	void addContractor(String[] contractor) {
		contrRecords.add(contractor);

	}

}
